

.clear(): This command is used to clear the text from an input field.
For example, if you wanted to clear the text from a search field, you could use .clear(). 
You can also type and clear it or get the specific element if an element appears more than once on the web page.
1).cy.get('#search-field').clear()
2).cy.get('#search-field').type("hello").clear()
3).cy.get('#button-cart').first().clear()
=========================================================================================

cy.intercept(): This command is used to intercept and mock network requests made by the page being tested. 
This command accepts a request method and a URL pattern as arguments, 
and it returns an object that can be used to configure the mock response for the intercepted request.

Here is an example of how to use the cy.intercept() command:

cy.intercept('GET', 'https://example.com/api/users').as('getUsers');
// Perform some actions on the page that make a GET request to the specified URL
cy.get('button').click();
// Configure the mock response for the intercepted request
cy.get('@getUsers').then(interception => {
  interception.reply(200, [{ id: 1, name: 'Tom' }, { id: 2, name: 'Bob' }]);
});
=========================================================================================


cy.request(): This command is used to make a request to a specific URL. For example, 
if you wanted to make a GET request to the URL "https://api.coinbase.com/v2/currencies" and log the response,
 you can use the following code:

cy.request("GET", "https://api.coinbase.com/v2/currencies").then(
    (response) => {
      console.log(response.status)})
=========================================================================================

cy.task(): This command is used to run custom Node.js code within your test. For example, 
if you wanted to print a message on the console, you could use the following code:
  cy.task("log", "hello World");
=========================================================================================

cy.scrollTo(): This command is used to scroll to a specific element on the page. 
You can scroll on a page by passing the coordinates or the position like bottom,topLeft.
Here is an example of how to use the cy.scrollTo() command:

1).cy.scrollTo(0, 500);
2).cy.scrollTo("topRight");
3).cy.scrollTo("bottom");
4).cy.scrollTo(0, 100);
=========================================================================================

cy.getCookie(): This command is used to retrieve a cookie with a specific name from the current page. 
This command accepts the name of the cookie as an argument and returns an object containing cookie's name, value, and other information.
Below is an example of how to use the cy.getCookie() command:

cy.getCookie('myCookie').then(cookie => {
  console.log(cookie.name); // logs the cookie name
  console.log(cookie.value); // logs the cookie value
});
=========================================================================================

cy.clearCookies() : This command is used to delete all the cookies on the current page. 
This command does not accept any arguments, and it does not return anything.
Here is an example of how to use the cy.clearCookies() command:

cy.clearCookies();
=========================================================================================

cy.url() : This command is used to get the current URL of the page being tested. 
This command does not accept any arguments, and it returns a string containing the current URL.
Below is an example of how to use the cy.url() command

cy.url().then(url => {
  console.log(url); // logs the current URL
});
=========================================================================================

cy.location(): This command is used to get the current location of the page being tested. 
This command does not accept any arguments, 
and it returns an object containing information about the current location, such as the URL, hostname, pathname, and search parameters.
Here is an example of how to use the cy.location() command:

cy.location().then(location => {
  console.log(location.href); // logs the current URL
  console.log(location.hostname); // logs the current hostname
  console.log(location.pathname); // logs the current pathname
  console.log(location.search); // logs the current search parameters
});
=========================================================================================

cy.reload(): This command is used to reload the current page. 
This command does not accept any arguments, and it does not return anything.
Here is an example of how to use the cy.reload() command:

cy.reload();
=========================================================================================

cy.clock() : This command is used to control the clock for a test. 
This command can be used to set the initial time for the clock or to manually advance the clock by a specified amount of time. 
This can be useful when testing time-dependent features, such as timeouts or scheduled events.
Here is an example of how to use the cy.clock() command:

const myFunction = () => {
  // do something
};
cy.clock(1000); // set the initial time to 1 second
// Call myFunction in your test
myFunction();
cy.tick(1000); // advance the clock by another second
// Verify that myFunction was called after 1 second
cy.get('@myFunction').should('have.been.calledOnce');
=========================================================================================

cy.viewport() : This command is used to change the size of the viewport for a test. 
This can be useful when testing the responsiveness of a web application, or when simulating different devices and screen sizes.
Here is an example of how to use the cy.viewport() command:

cy.viewport(320, 480); // set the viewport size to 320x480 pixels
=========================================================================================

cy.window() : This command is used to get the global window object for the page being tested. 
This command does not accept any arguments, and it returns the window object as a Cypress subject, 
which can be used to interact with the page in the same way a user would.

Here is an example of how to use the cy.window() command:

cy.window().then(win => {
  // Use the window object to interact with the page
  win.scrollTo(0, 100);
  win.alert('Hello, world!');
});
=========================================================================================

cy.title() : This command is used to get the title of the page being tested. 
This command does not accept any arguments, and it returns a string containing the page’s title.
Here is an example of how to use the cy.title() command:

cy.title().then(title => {
  console.log(title); // logs the page's title
});
=========================================================================================

cy.dblclick() : This command is used to simulate a double-click on an element in the page being tested. 
This command accepts a selector as an argument, and it returns the element that was double-clicked as a Cypress subject.
Here is an example of how to use the cy.dblclick() command

cy.get('button').dblclick();
=========================================================================================


cy.rightclick(): This command is used to simulate a right-click on an element in the page being tested. 
This command accepts a selector as an argument, and it returns the element that was right-clicked as a Cypress subject.
Here is an example of how to use the cy.rightclick() command:

cy.get('button').rightclick();
=========================================================================================


cy.spy(): This command is used to create a “spy” on a specific function. 
A spy is a special type of test double that records information about how the function is called and what arguments it is called with. 
This information can be used to verify that the function is being called as expected in the test.

Here is an example of how to use the cy.spy() command:

const myFunction = () => {
  // do something
};
cy.spy(myFunction);
// Call myFunction in your test
myFunction();
// Verify that myFunction was called
cy.get('@myFunction').should('have.been.calledOnce');
=========================================================================================
